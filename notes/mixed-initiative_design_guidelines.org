The use of mixed-initative control systems can be seen as a kind of "literate workflow." Instructions provided by the programmer should be simple and goal-directed, but also flexible enough to allow for variability in execution. They describe constraints as well as the amount of variability allowed, and include explicit means of adding invariants and tests that will guide modifications a user may make (especially where the programmer feels a user is most likely to diverge from the provided instructions or guidance). In addition they describe the means to recover from errors (again especially at the points where a programmer feels a user may deviate or modify the instruction(s)). To some degree, because we allow the user to make modifications it will also be important to keep a record of the modifications that have been made, so they can potentially be "undone" or reset in the event the user has a need to recover them. Additionally both the user and the programmer should have the ability to compose instructions or directives in meaningful ways (potentially even composing the given instructions with outside data or instruction sets to assist the user further).

* Instructions to the user need to
** be simple and goal-directed
** contain information about how and where it is safe to deviate from of modify them
** contain connections to the originally intended program in the event the user needs to recover
** be easily modified and/or composed with additional instruction sets

* Programs need to
** have waypoints or markers for expected outcomes that can guide the user along a path
** contain variation points that allow for flexibility, but also provide the above guidance (perhaps there is something we can do with speculative flight paths or something like that)
** be easily modified and/or composed with additional programs
